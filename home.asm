
INCLUDE "macros.asm"
INCLUDE "constants.asm"


SECTION "NULL", ROM0[$0000]
NULL::
Null::
null:
	ds 0 ; lol


INCLUDE "home/restarts.asm"
INCLUDE "home/interrupts.asm"

INCLUDE "home/utilities.asm"
	
	
SECTION "Home", ROM0[$0100]

Start::
	di ; Make sure nothing gets in the way
	jr Init ; Skip over header
	nop
	
; Allocate header space for header.
; (Which will be generated by RGBFix)
; Must initialize to 0, otherwise slight conflicts arise
	dbfill ($0150 - $0104), 0
	
	
Init::
	ld sp, $E000 ; Put SP out of HRAM to WRAM (push will write to $DFFF then $DFFE ;)
	
.waitVBlank
	ld a, [rSTAT]
	and 3
	dec a
	jr nz, .waitVBlank
	ld [rLCDC], a ; Shut screen down for init
	ld [rNR52], a ; Kill sound during init
	
	; First step of initializing the game : make sure *all* memory is in a known state
	; Maybe I'm clearing too much, but heh, at least I won't get any unexpected errors
	
	ld hl, $C000
	ld bc, $2000 - 4 ; The last four bytes are stack bytes, and this is the highest point `Fill` will reach. Clearing them would cause it to return to $0000, oopsies!
	xor a
	call Fill ; Clear WRAM bank 0

	; Don't clear the first few bytes, they are either already initialized or will be later before any read
	ld c, hHeldButtons & $FF
.clearHRAM
	xor a
	ld [$ff00+c], a
	inc c
	dec a ; a = $FF
	cp c
	jr nz, .clearHRAM ; Don't clear $FFFF, we'll set it a bit later
	
	; Now, we clear VRAM
	ld hl, $8000
	ld bc, $2000
	xor a
	call Fill
	ld hl, BasicFont
	ld de, $8200
	ld bc, BasicFontEnd - BasicFont
	call Copy
	
	ld hl, $FE00
	ld c, $A0
	; a = 0
.clearOAM
	ld [hl], a
	inc l ; Can't use 16-bit inc/dec on DMG, thus no `rst fill`
	dec b
	jr nz, .clearOAM
	
	; a is zero, btw
	ld [rWX], a
	ld [rWY], a
	ld [rSCX], a
	ld [rSCY], a
	ld [rIF], a ; Clear all interrupts
	ei
	
	ld hl, GOLFName
	ld de, $9821
	rst copyStr
	
	ld a, $09
	ld [rIE], a
	ld a, $E4
	ld [rBGP], a
	ld a, $91
	ld [rLCDC], a
	rst waitVBlank
	
	
MainLoop::
	ld hl, WaitHandshakeStr
	ld de, $98A1
	call CopyStrToVRAM
	
.tryHandshake
	xor a
	ldh [hSerialInput], a
	ldh [hSerialMode], a
	ld a, 2
	ld [rSB], a
	ld a, $80
	ld [rSC], a
	
	
.waitHandshake
	ldh a, [hSerialRecieved]
	and a
	jr z, .waitHandshake
	xor a
	ldh [hSerialRecieved], a
	ldh a, [hSerialOutput]
	dec a
	jr nz, .tryHandshake ; The opposing Gameboy MUST send a $01
	
	ld hl, OKStr
	ld de, $98AF
	call CopyStrToVRAM
	
	ld a, $60
	ldh [hSerialInput], a
	
	ld hl, SelectTradeStr
	ld de, $98C1
	call CopyStrToVRAM
	
.waitInMenu
	ldh a, [hSerialOutput]
	cp $D0
	jr nz, .waitInMenu
	; ld a, $D0
	ldh [hSerialInput], a
.tryMenuSelection
	xor a
	ldh [hSerialRecieved], a
.waitMenuSelection
	ldh a, [hSerialRecieved]
	and a
	jr z, .waitMenuSelection
	ldh a, [hSerialOutput]
	cp $D4
	jr nz, .tryMenuSelection
	ldh [hSerialInput], a
	
	ld hl, OKStr
	ld de, $98CF
	call CopyStrToVRAM
	
	; We're now in the Cable Club !
	
	; Ignore the first few bytes of data, they are syncing stuff.
	call Serial_SyncAndExchangeNybble
	
	ld a, $60
	ldh [hSerialInput], a
	ld bc, $11
	call Serial_IgnoreBCBytes
	
	
	ld hl, SendingPayloadStr
	ld de, $98E1
	call CopyStrToVRAM
	
	ld hl, PayloadParty
	ld bc, $1A8
	call Serial_SendBytes
	
	ld hl, PayloadPatchList
	ld bc, $C8
	call Serial_SendBytes
	
	ld hl, OKStr + 1
	ld de, $98F0
	call CopyStrToVRAM
	
	ld hl, DoingMagicStr
	ld de, $9901
	call CopyStrToVRAM
	
.tryWaitForRCE
	xor a
	ldh [hSerialRecieved], a
.waitForRCE
	ldh a, [hSerialRecieved]
	and a
	jr z, .waitForRCE
	ldh a, [hSerialOutput]
	cp $2A
	jr nz, .tryWaitForRCE
	
	ld hl, OKStr + 1
	ld de, $9910
	call CopyStrToVRAM
	
	jr @
	
	
	
PatchList		equ $C5D0
	
SerialRecieved	equ $FFA9
SerialClockMode	equ $FFAA
SerialDataIn	equ $FFAB
SerialDataOut	equ $FFAC
	
PayloadParty::
	dbfill 3, 0
.actualCode
	ld a, $2A
	ld [rSB], a
	jp PatchList + 2 ; Skip over 2 terminating bytes
	
	db 1 ; Party size
	; Party data
	dbfill 356, $E3
	db $CE, $FF
	dbfill $31, 0
	db $FF
	
PayloadPatchList:: ; Located at $C5D0 in the opponent's side
	db $FF, $FF
	ld a, $81
	ld [rSC], a
	xor a
	ldh [SerialRecieved], a
	inc a
	ldh [SerialClockMode], a ; Switch to ext clock
.lock
	dec b
	jr .lock
	dbfill $B9, 0
	
	
INCLUDE "home/handlers.asm"

